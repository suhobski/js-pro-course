(()=>{"use strict";var e,r,t={835:()=>{const e=function(r){if(!(this instanceof e))return new e(r);this.init=r};e.prototype.plus=function(e){return this.init+=e,this},e.prototype.minus=function(e){return this.init-=e,this},e.prototype.divide=function(e){return 0===e||(this.init/=e),this},e.prototype.multi=function(e){return this.init*=e,this},e.prototype.revert=function(){return this.init*=-1,this},e.prototype.pow=function(e){return this.init=Math.pow(this.init,e),this},e.prototype.factorial=function(){if(this.init<=0)return this.init=1,this;let e=[],r=this.init;for(;r>0;)e.push(r),r--;return this.init=e.reduce(((e,r)=>e*r)),this},e.prototype.value=function(){return this.init},e.prototype.format=function(e){return e(this.value())},describe("Math function",(()=>{it("should perform basic math operations",(()=>{const r=e(5).plus(10).minus(12).divide(0).value();assert.strictEqual(r,3)})),it("should calculate a factorial of an integer",(()=>{const r=e(5).factorial().value();assert.strictEqual(r,120);const t=e(0).factorial().value();assert.strictEqual(t,1);const n=e(-1).factorial().value();assert.strictEqual(n,1);const o=e(1).factorial().value();assert.strictEqual(o,1)})),it("should revert integer's sign",(()=>{const r=e(1).revert().value();assert.strictEqual(r,-1);const t=e(-1).revert().value();assert.strictEqual(t,1)})),it(".format method should perform an action defined in a callback passed to it",(()=>{const r=e(1).format((function(e){return`The result is ${e}`}));assert.strictEqual(r,"The result is 1")})),it("all methods except .format must return context",(()=>{const r=e(5).plus(5);assert.typeOf(r,"object")})),it(".format should not return context",(()=>{const r=e(1).format((function(e){return`The result is ${e}`}));assert.notTypeOf(r,"object")}))}))}},n={};function o(e){if(n[e])return n[e].exports;var r=n[e]={exports:{}},i={id:e,module:r,factory:t[e],require:o};return o.i.forEach((function(e){e(i)})),r=i.module,i.factory.call(r.exports,r,r.exports,i.require),r.exports}o.m=t,o.c=n,o.i=[],o.hu=e=>e+"."+o.h()+".hot-update.js",o.hmrF=()=>"test."+o.h()+".hot-update.json",o.h=()=>"ed9ab8ce792796a828bd",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="immutability:",o.l=(t,n,i,c)=>{if(e[t])e[t].push(n);else{var a,s;if(void 0!==i)for(var d=document.getElementsByTagName("script"),u=0;u<d.length;u++){var l=d[u];if(l.getAttribute("src")==t||l.getAttribute("data-webpack")==r+i){a=l;break}}a||(s=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,o.nc&&a.setAttribute("nonce",o.nc),a.setAttribute("data-webpack",r+i),a.src=t),e[t]=[n];var f=(r,n)=>{a.onerror=a.onload=null,clearTimeout(p);var o=e[t];if(delete e[t],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(n))),r)return r(n)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=f.bind(null,a.onerror),a.onload=f.bind(null,a.onload),s&&document.head.appendChild(a)}},(()=>{var e,r,t,n,i={},c=o.c,a=[],s=[],d="idle";function u(e){d=e;for(var r=0;r<s.length;r++)s[r].call(null,e)}function l(e){if(0===r.length)return e();var t=r;return r=[],Promise.all(t).then((function(){return l(e)}))}function f(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return u("check"),o.hmrM().then((function(n){if(!n)return u(v()?"ready":"idle"),null;u("prepare");var i=[];return r=[],t=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,r){return o.hmrC[r](n.c,n.r,n.m,e,t,i),e}),[])).then((function(){return l((function(){return e?h(e):(u("ready"),i)}))}))}))}function p(e){return"ready"!==d?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):h(e)}function h(e){e=e||{},v();var r=t.map((function(r){return r(e)}));t=void 0;var o,i=r.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return u("abort"),Promise.resolve().then((function(){throw i[0]}));u("dispose"),r.forEach((function(e){e.dispose&&e.dispose()})),u("apply");var c=function(e){o||(o=e)},a=[];return r.forEach((function(e){if(e.apply){var r=e.apply(c);if(r)for(var t=0;t<r.length;t++)a.push(r[t])}})),o?(u("fail"),Promise.resolve().then((function(){throw o}))):n?h(e).then((function(e){return a.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):(u("idle"),Promise.resolve(a))}function v(){if(n)return t||(t=[]),Object.keys(o.hmrI).forEach((function(e){n.forEach((function(r){o.hmrI[e](r,t)}))})),n=void 0,!0}o.hmrD=i,o.i.push((function(h){var v,m,y,b=h.module,g=function(t,n){var o=c[n];if(!o)return t;var i=function(r){if(o.hot.active){if(c[r]){var i=c[r].parents;-1===i.indexOf(n)&&i.push(n)}else a=[n],e=r;-1===o.children.indexOf(r)&&o.children.push(r)}else console.warn("[HMR] unexpected require("+r+") from disposed module "+n),a=[];return t(r)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var f in t)Object.prototype.hasOwnProperty.call(t,f)&&"e"!==f&&Object.defineProperty(i,f,s(f));return i.e=function(e){return function(e){switch(d){case"ready":return u("prepare"),r.push(e),l((function(){u("ready")})),e;case"prepare":return r.push(e),e;default:return e}}(t.e(e))},i}(h.require,h.id);b.hot=(v=h.id,m=b,y={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==v,_requireSelf:function(){a=m.parents.slice(),e=v,o(v)},active:!0,accept:function(e,r){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._acceptedDependencies[e[t]]=r||function(){};else y._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._declinedDependencies[e[r]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=y._disposeHandlers.indexOf(e);r>=0&&y._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,d){case"idle":t=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](v,t)})),u("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](v,t)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(v)}},check:f,apply:p,status:function(e){if(!e)return d;s.push(e)},addStatusHandler:function(e){s.push(e)},removeStatusHandler:function(e){var r=s.indexOf(e);r>=0&&s.splice(r,1)},data:i[v]},e=void 0,y),b.parents=a,b.children=[],a=[],h.require=g})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var r=o.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e,r,t,n,i={43:0},c={};function a(e){return new Promise(((r,t)=>{c[e]=r;var n=o.p+o.hu(e),i=new Error;o.l(n,(r=>{if(c[e]){c[e]=void 0;var n=r&&("load"===r.type?"missing":r.type),o=r&&r.target&&r.target.src;i.message="Loading hot update chunk "+e+" failed.\n("+n+": "+o+")",i.name="ChunkLoadError",i.type=n,i.request=o,t(i)}}))}))}function s(c){function a(e){for(var r=[e],t={},n=r.map((function(e){return{chain:[e],id:e}}));n.length>0;){var i=n.pop(),c=i.id,a=i.chain,d=o.c[c];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:c};if(d.hot._main)return{type:"unaccepted",chain:a,moduleId:c};for(var u=0;u<d.parents.length;u++){var l=d.parents[u],f=o.c[l];if(f){if(f.hot._declinedDependencies[c])return{type:"declined",chain:a.concat([l]),moduleId:c,parentId:l};-1===r.indexOf(l)&&(f.hot._acceptedDependencies[c]?(t[l]||(t[l]=[]),s(t[l],[c])):(delete t[l],r.push(l),n.push({chain:a.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:t}}function s(e,r){for(var t=0;t<r.length;t++){var n=r[t];-1===e.indexOf(n)&&e.push(n)}}o.f&&delete o.f.jsonpHmr,e=void 0;var d={},u=[],l={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(o.o(r,p)){var h,v=r[p],m=!1,y=!1,b=!1,g="";switch((h=v?a(p):{type:"disposed",moduleId:p}).chain&&(g="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":c.onDeclined&&c.onDeclined(h),c.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+g));break;case"declined":c.onDeclined&&c.onDeclined(h),c.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+g));break;case"unaccepted":c.onUnaccepted&&c.onUnaccepted(h),c.ignoreUnaccepted||(m=new Error("Aborted because "+p+" is not accepted"+g));break;case"accepted":c.onAccepted&&c.onAccepted(h),y=!0;break;case"disposed":c.onDisposed&&c.onDisposed(h),b=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(y)for(p in l[p]=v,s(u,h.outdatedModules),h.outdatedDependencies)o.o(h.outdatedDependencies,p)&&(d[p]||(d[p]=[]),s(d[p],h.outdatedDependencies[p]));b&&(s(u,[h.moduleId]),l[p]=f)}r=void 0;for(var E,w=[],_=0;_<u.length;_++){var D=u[_];o.c[D]&&o.c[D].hot._selfAccepted&&l[D]!==f&&!o.c[D].hot._selfInvalidated&&w.push({module:D,require:o.c[D].hot._requireSelf,errorHandler:o.c[D].hot._selfAccepted})}return{dispose:function(){var e;t.forEach((function(e){delete i[e]})),t=void 0;for(var r,n=u.slice();n.length>0;){var c=n.pop(),a=o.c[c];if(a){var s={},l=a.hot._disposeHandlers;for(_=0;_<l.length;_++)l[_].call(null,s);for(o.hmrD[c]=s,a.hot.active=!1,delete o.c[c],delete d[c],_=0;_<a.children.length;_++){var f=o.c[a.children[_]];f&&(e=f.parents.indexOf(c))>=0&&f.parents.splice(e,1)}}}for(var p in d)if(o.o(d,p)&&(a=o.c[p]))for(E=d[p],_=0;_<E.length;_++)r=E[_],(e=a.children.indexOf(r))>=0&&a.children.splice(e,1)},apply:function(e){for(var r in l)o.o(l,r)&&(o.m[r]=l[r]);for(var t=0;t<n.length;t++)n[t](o);for(var i in d)if(o.o(d,i)){var a=o.c[i];if(a){E=d[i];for(var s=[],f=[],p=0;p<E.length;p++){var h=E[p],v=a.hot._acceptedDependencies[h];if(v){if(-1!==s.indexOf(v))continue;s.push(v),f.push(h)}}for(var m=0;m<s.length;m++)try{s[m].call(null,E)}catch(r){c.onErrored&&c.onErrored({type:"accept-errored",moduleId:i,dependencyId:f[m],error:r}),c.ignoreErrored||e(r)}}}for(var y=0;y<w.length;y++){var b=w[y],g=b.module;try{b.require(g)}catch(r){if("function"==typeof b.errorHandler)try{b.errorHandler(r)}catch(t){c.onErrored&&c.onErrored({type:"self-accept-error-handler-errored",moduleId:g,error:t,originalError:r}),c.ignoreErrored||e(t),e(r)}else c.onErrored&&c.onErrored({type:"self-accept-errored",moduleId:g,error:r}),c.ignoreErrored||e(r)}}return u}}}self.webpackHotUpdateimmutability=(e,t,i)=>{for(var a in t)o.o(t,a)&&(r[a]=t[a]);i&&n.push(i),c[e]&&(c[e](),c[e]=void 0)},o.hmrI.jsonp=function(e,i){r||(r={},n=[],t=[],i.push(s)),o.o(r,e)||(r[e]=o.m[e])},o.hmrC.jsonp=function(c,d,u,l,f,p){f.push(s),e={},t=d,r=u.reduce((function(e,r){return e[r]=!1,e}),{}),n=[],c.forEach((function(r){o.o(i,r)&&void 0!==i[r]&&(l.push(a(r)),e[r]=!0)})),o.f&&(o.f.jsonpHmr=function(r,t){e&&!o.o(e,r)&&o.o(i,r)&&void 0!==i[r]&&(t.push(a(r)),e[r]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o(835)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,